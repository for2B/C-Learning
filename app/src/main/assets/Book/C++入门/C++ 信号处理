信号是由操作系统传给进程的中断，会提早终止一个程序。在 UNIX、LINUX、Mac OS X 或 Windows 系统上，可以通过按 Ctrl+C 产生中断。\n
\n
有些信号不能被程序捕获，但是下表所列信号可以在程序中捕获，并可以基于信号采取适当的动作。这些信号是定义在 C++ 头文件 <csignal> 中。\n

信号	描述\n
SIGABRT	程序的异常终止，如调用 abort。\n
SIGFPE	错误的算术运算，比如除以零或导致溢出的操作。\n
SIGILL	检测非法指令。\n
SIGINT	接收到交互注意信号。\n
SIGSEGV	非法访问内存。\n
SIGTERM	发送到程序的终止请求。\n
signal() 函数\n
C++ 信号处理库提供了 signal 函数，用来捕获突发事件。以下是 signal() 函数的语法：\n
\n
void (*signal (int sig, void (*func)(int)))(int); \n
这个函数接收两个参数：第一个参数是一个整数，代表了信号的编号；第二个参数是一个指向信号处理函数的指针。\n
\n
让我们编写一个简单的 C++ 程序，使用 signal() 函数捕获 SIGINT 信号。不管您想在程序中捕获什么信号，您都必须使用 signal 函数来注册信号，并将其与信号处理程序相关联。看看下面的实例：\n

实例\n
#include <iostream>\n
#include <csignal>\n
#include <unistd.h>\n

using namespace std;\n

void signalHandler( int signum )\n
{\n
    cout << "Interrupt signal (" << signum << ") received.\n";\n
 \n
    // 清理并关闭\n
    // 终止程序  \n

   exit(signum);  \n

}\n

int main ()\n
{\n
    // 注册信号 SIGINT 和信号处理程序\n
    signal(SIGINT, signalHandler);  \n
 \n
    while(1){\n
       cout << "Going to sleep...." << endl;\n
       sleep(1);\n
    }\n

    return 0;\n
}\n
当上面的代码被编译和执行时，它会产生下列结果：\n

Going to sleep....\n
Going to sleep....\n
Going to sleep....\n
现在，按 Ctrl+C 来中断程序，您会看到程序捕获信号，程序打印如下内容并退出：\n

Going to sleep....\n
Going to sleep....\n
Going to sleep....\n
Interrupt signal (2) received.\n
raise() 函数\n
您可以使用函数 raise() 生成信号，该函数带有一个整数信号编号作为参数，语法如下：\n

int raise (signal sig);\n
在这里，sig 是要发送的信号的编号，这些信号包括：SIGINT、SIGABRT、SIGFPE、SIGILL、SIGSEGV、SIGTERM、SIGHUP。以下是我们使用 raise() 函数内部生成信号的实例：\n
\n
实例\n
#include <iostream>\n
#include <csignal>\n
#include <unistd.h>\n

using namespace std;\n

void signalHandler( int signum )\n
{
    cout << "Interrupt signal (" << signum << ") received.\n";\n

    // 清理并关闭\n
    // 终止程序 \n

   exit(signum);  \n
 \n
}\n
 \n
int main ()\n
{\n
    int i = 0;\n
    // 注册信号 SIGINT 和信号处理程序\n
    signal(SIGINT, signalHandler);  \n
 \n
    while(++i){\n
       cout << "Going to sleep...." << endl;\n
       if( i == 3 ){\n
          raise( SIGINT);\n
       }\n
       sleep(1);\n
    }\n
 \n
    return 0;\n
}\n
当上面的代码被编译和执行时，它会产生下列结果，并会自动退出：\n
\n
Going to sleep....\n
Going to sleep....\n
Going to sleep....\n
Interrupt signal (2) received\n